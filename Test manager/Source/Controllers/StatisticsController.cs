// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using AppKit;
using Microcharts;
using Microcharts.macOS;
using Test_manager.Source.Services;
using Xamarin.Forms.Internals;

namespace Test_manager
{
    public partial class StatisticsController : NSViewController
    {
        public StatisticsController(IntPtr handle) : base(handle) {
        }

        public override void ViewDidLoad() {
            base.ViewDidLoad();
            RenderTurnsNumberGraph();
            if ((MainController.TestRun?.ApplicationData?.AngularVelocityList?.ValuesList.Count ?? 0) < 30) {
                MoreDataRequiredLabel.Hidden = false;
            } else {
                MoreDataRequiredLabel.Hidden = true;
                RenderAngularVelocityTestRunGraph(MainController.TestRun.ApplicationData.AngularVelocityList.ValuesList
                    .Select(val => val.Value).ToList());
            }
            RenderAngularVelocityAverageGraph();
            RenderAngularVelocityMedianGraph();
            RenderAngularVelocityStandardDeviationGraph();
        }

        private void RenderAngularVelocityAverageGraph() {
            var entries = new List<ChartEntry>();
            TestRunsDataStorage.GetTestRunsData().ForEach(runData => {
                entries.Add(new ChartEntry((float) runData.VelocityAverage) {
                    Label = runData.Id.ToString(),
                    ValueLabel = Math.Round(runData.VelocityAverage, 2).ToString(CultureInfo.CurrentCulture)
                });
            });

            CreateChart(AngularVelocityAverageChart, entries);
        }

        private void RenderAngularVelocityMedianGraph() {
            var entries = new List<ChartEntry>();
            TestRunsDataStorage.GetTestRunsData().ForEach(runData => {
                entries.Add(new ChartEntry((float) runData.VelocityMedian) {
                    Label = runData.Id.ToString(),
                    ValueLabel = Math.Round(runData.VelocityMedian, 2).ToString(CultureInfo.CurrentCulture)
                });
            });

            CreateChart(AngularVelocityMedianChart, entries);
        }

        private void RenderAngularVelocityStandardDeviationGraph() {
            var entries = new List<ChartEntry>();
            TestRunsDataStorage.GetTestRunsData().ForEach(runData => {
                entries.Add(new ChartEntry((float) runData.VelocityStandardDeviation) {
                    Label = runData.Id.ToString(),
                    ValueLabel = Math.Round(runData.VelocityStandardDeviation, 2).ToString(CultureInfo.CurrentCulture)
                });
            });

            CreateChart(AngularVelocityStandardDiviationChart, entries);
        }

        private void RenderTurnsNumberGraph() {
            var entries = new List<ChartEntry>();
            TestRunsDataStorage.GetTestRunsData().ForEach(runData => {
                entries.Add(new ChartEntry(runData.TurnsNumber) {
                    Label = runData.Id.ToString(),
                    ValueLabel = runData.TurnsNumber.ToString()
                });
            });

            CreateChart(TurnsNumberChart, entries);
        }

        private void RenderAngularVelocityTestRunGraph(IReadOnlyCollection<double> angularSpeedList) {
            var entries = new List<ChartEntry>();
            angularSpeedList.ToList()
                .Where((x, i) => i % (angularSpeedList.Count / 20) == 0)
                .ForEach(angularSpeed => {
                    entries.Add(new ChartEntry((float) angularSpeed) {
                        Label = ".",
                        ValueLabel = Math.Round(angularSpeed, 2).ToString(CultureInfo.CurrentCulture)
                    });
                });

            CreateChart(AngularVelocityChart, entries);
        }

        private static void CreateChart(NSView view, IEnumerable<ChartEntry> entries) {
            var chart = new LineChart {
                Entries = entries,
                LineMode = LineMode.Straight
            };

            var chartView = new ChartView {
                Frame = view.Bounds,
                AutoresizingMask = NSViewResizingMask.WidthSizable | NSViewResizingMask.HeightSizable,
                Chart = chart,
            };

            view.AddSubview(chartView);
        }
    }
}